// Nova fun√ß√£o uploadMidia baseada em endividamentoApi.js
const uploadMidia = async (file, messageId) => {
  if (!file) return null;

  const BUCKET_NAME = 'midias_bot';

  try {
    // Gerar nome √∫nico para o arquivo (mesmo m√©todo do endividamentoApi.js)
    const uid =
      typeof crypto !== 'undefined' && crypto.randomUUID
        ? crypto.randomUUID()
        : String(Date.now());

    // Determinar pasta baseado no tipo de arquivo
    let folder = '';
    if (file.type.includes('image')) {
      folder = 'imagens';
    } else if (file.type.includes('video')) {
      folder = 'videos';
    } else if (file.type.includes('audio')) {
      folder = 'audios';
    } else if (file.type.includes('pdf')) {
      folder = 'pdfs';
    } else {
      folder = 'outros';
    }

    // Caminho completo: folder/userId/uuid_filename
    const path = `${folder}/${user.id}/${uid}_${file.name}`;

    console.log(`üì§ Fazendo upload de ${file.name} para ${path}...`);

    // Fazer upload para o Storage (m√©todo id√™ntico ao endividamentoApi.js)
    const { error } = await supabase.storage
      .from(BUCKET_NAME)
      .upload(path, file, { upsert: false });

    if (error) {
      // Tratamento de erro similar ao endividamentoApi.js
      if (
        String(error.message || '')
          .toLowerCase()
          .includes('bucket') &&
        String(error.message || '')
          .toLowerCase()
          .includes('not') &&
        String(error.message || '')
          .toLowerCase()
          .includes('found')
      ) {
        throw new Error(
          `Bucket "${BUCKET_NAME}" n√£o encontrado. Crie o bucket no Storage do Supabase (p√∫blico) ou altere o nome no c√≥digo.`,
        );
      }
      console.error('‚ùå Erro no upload:', error);
      throw error;
    }

    console.log('‚úÖ Upload realizado com sucesso!');

    // Obter URL p√∫blica do arquivo
    const { data: urlData } = supabase.storage
      .from(BUCKET_NAME)
      .getPublicUrl(path);

    const urlPublica = urlData.publicUrl;

    console.log('üîó URL p√∫blica:', urlPublica);

    return {
      url: urlPublica,
      caminho: path,
      bucket: BUCKET_NAME,
      nomeOriginal: file.name,
      tipo: file.type,
      tamanho: file.size,
    };
  } catch (error) {
    console.error('‚ùå Erro ao fazer upload da m√≠dia:', error);
    throw error;
  }
};
