
  const toggleNode = (nodeId) => {
    setExpandedNodes((prev) => ({
      ...prev,
      [nodeId]: !prev[nodeId],
    }));
  };

  // Funções de controle de expansão no estilo Contas a Pagar
  const toggleCategoria = (categoriaNome) => {
    const novaSet = new Set(categoriasExpandidas);
    if (novaSet.has(categoriaNome)) {
      novaSet.delete(categoriaNome);
    } else {
      novaSet.add(categoriaNome);
    }
    setCategoriasExpandidas(novaSet);
  };

  const toggleTodosTopicos = () => {
    if (todosExpandidos) {
      setCategoriasExpandidas(new Set());
    } else {
      const todasCategorias = new Set();
      // Seções de resultado que não devem ser expansíveis
      const resultadoSections = [
        'Receitas Brutas',
        'Receita Líquida de Vendas',
        'Lucro Bruto',
        'Resultado Operacional',
        'Lucro Antes do IR/CSLL',
        'Lucro Líquido do Exercício',
      ];

      dreData.forEach((item) => {
        // Só adiciona se não for uma seção de resultado
        if (!resultadoSections.includes(item.label)) {
          todasCategorias.add(item.label);
          if (item.children) {
            item.children.forEach((child) => {
              // Adiciona o subitem como chave composta
              todasCategorias.add(`${item.label}|${child.label}`);
              // Se o subitem tem children, adiciona eles também
              if (child.children) {
                child.children.forEach((grandchild) => {
                  todasCategorias.add(
                    `${item.label}|${child.label}|${grandchild.label}`,
                  );
                });
              }
            });
          }
        }
      });
      setCategoriasExpandidas(todasCategorias);
    }
    setTodosExpandidos(!todosExpandidos);
  };

  const formatCurrency = (value) => {
    const formatted = new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL',
    }).format(Math.abs(value));

    return value < 0 ? `-${formatted}` : formatted;
  };

  const getValueColor = (value, type) => {
    if (type === 'resultado-final') {
      return value >= 0 ? 'text-green-600' : 'text-red-600';
    }
    if (type === 'resultado') {
      return value >= 0 ? 'text-blue-600' : 'text-red-600';
    }
    return value < 0 ? 'text-red-500' : 'text-green-600';
  };

  const getIcon = (type, value) => {
    if (type === 'resultado-final') {
      return value >= 0 ? (
        <TrendUp className="w-2 h-2" />
      ) : (
        <TrendDown className="w-2 h-2" />
      );
    }
    if (type === 'resultado') {
      return value >= 0 ? (
        <Dot className="w-2 h-2" />
      ) : (
        <Dot className="w-2 h-2" />
      );
    }
    if (value < 0) {
      return <Dot className="w-2 h-2" />;
    }
    return <Dot className="w-2 h-2" />;
  };

  const getFolderIcon = (type) => {
    switch (type) {
      case 'receita':
        return <CurrencyDollar className="w-4 h-4 text-green-600" />;
      case 'deducao':
        return <Dot className="w-4 h-4 text-red-500" />;
      case 'custo':
        return <Dot className="w-4 h-4 text-orange-500" />;
      case 'despesa':
        return <Dot className="w-4 h-4 text-red-600" />;
      case 'imposto':
        return <Dot className="w-4 h-4 text-purple-600" />;
      case 'resultado':
        return <Dot className="w-4 h-4 text-blue-600" />;
      case 'resultado-final':
        return <TrendUp className="w-4 h-4 text-green-600" />;
      default:
        return <FileText className="w-4 h-4 text-gray-500" />;
    }
  };

  const renderTreeItem = (
    item,
    level = 0,
    isLastInSection = false,
    isEven = true,
  ) => {
    const hasChildren = item.children && item.children.length > 0;
    const isExpanded = expandedNodes[item.id];
    const isLeaf = !hasChildren;

    if (isLeaf) {
      return (
        <div
          key={item.id}
          className="ms-3 ps-3 relative before:absolute before:top-0 before:start-0 before:w-0.5 before:-ms-px before:h-full before:bg-gray-100"
        >
          <div
            className={`hs-accordion-selectable hs-accordion-selected:bg-gray-100 px-2 rounded-md cursor-pointer hover:bg-gray-100/50 transition-colors ${
              isEven ? 'bg-gray-50/30' : 'bg-white'
            }`}
            role="treeitem"
          >
            <div className="flex items-center gap-x-3 py-1">
              {getFolderIcon(item.type)}
              <div className="grow flex items-center justify-between">
                <div>
                  <span className="text-sm text-gray-800 font-medium">
                    {item.label}
                  </span>
                  <p className="text-xs text-gray-600 mt-0.5">
                    {item.description}
                  </p>
                </div>
                <span
                  className={`text-sm font-semibold ${getValueColor(
                    item.value,
                    item.type,
                  )}`}
                >
                  {formatCurrency(item.value)}
                </span>
              </div>
            </div>
          </div>
          {/* Divider after leaf items */}
          {isLastInSection && (
            <div className="border-b border-gray-200 my-2"></div>
          )}
        </div>
      );
    }

    return (
      <div
        key={item.id}
        className={`hs-accordion ${isExpanded ? 'active' : ''}`}
        role="treeitem"
        aria-expanded={isExpanded}
      >
        {/* Accordion Heading */}
        <div className="hs-accordion-heading py-0.5 flex items-center gap-x-0.5 w-full">
          <button
            className="hs-accordion-toggle size-6 flex justify-center items-center hover:bg-gray-100 rounded-md focus:outline-hidden focus:bg-gray-100 disabled:opacity-50 disabled:pointer-events-none"
            aria-expanded={isExpanded}
            aria-controls={`dre-${item.id}`}
            onClick={() => toggleNode(item.id)}
          >
            <svg
              className="size-4 text-gray-800"
              xmlns="http://www.w3.org/2000/svg"
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="1.5"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M5 12h14"></path>
              <path
                className={isExpanded ? 'hidden' : 'block'}
                d="M12 5v14"
              ></path>
            </svg>
          </button>

          <div
            className={`grow hs-accordion-selectable hs-accordion-selected:bg-gray-100 px-1.5 rounded-md cursor-pointer hover:bg-gray-100/40 transition-colors ${
              isEven ? 'bg-gray-50/20' : 'bg-white'
            }`}
          >
            <div className="flex items-center gap-x-3">
              {getFolderIcon(item.type)}
              <div className="grow flex items-center justify-between">
                <div>
                  <span className="text-sm text-gray-800 font-medium">
                    {item.label}
                  </span>
                  <p className="text-xs text-gray-600 mt-0.5">
                    {item.description}
                  </p>
                </div>
                <span
                  className={`text-sm font-semibold ${getValueColor(
                    item.value,
                    item.type,
                  )}`}
                >
                  {formatCurrency(item.value)}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Accordion Content */}
        <div
          id={`dre-${item.id}`}
          className={`hs-accordion-content w-full overflow-hidden transition-[height] duration-300 ${
            isExpanded ? '' : 'hidden'
          }`}
          role="group"
          aria-labelledby={`dre-${item.id}`}
        >
          <div className="hs-accordion-group ps-7 relative before:absolute before:top-0 before:start-3 before:w-0.5 before:-ms-px before:h-full before:bg-gray-100">
            {item.children.map((child, index) =>
              renderTreeItem(
                child,
                level + 1,
                index === item.children.length - 1,
                (index + 1) % 2 === 0,
              ),
            )}
          </div>
          {/* Divider after accordion items */}
          {isLastInSection && (
            <div className="border-b border-gray-200 my-2"></div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div className="p-6">
      <PageTitle
        title="DRE - Demonstrativo de Resultado do Exercício"
        subtitle="Análise detalhada dos resultados financeiros do período"
        icon={TrendUp}
      />

      {/* Filtros */}
      <div className="bg-white rounded-lg shadow p-3 mb-4 border border-gray-200">
        <div className="mb-6">
          <span className="text-lg font-bold text-[#000638] flex items-center gap-1">
            <Funnel size={18} weight="bold" />
            Filtros
          </span>
          <span className="text-xs text-gray-500 mt-1">
            Selecione o período para análise
          </span>
        </div>

        {/* Seletor de Tipo de Análise */}
        <div className="mb-4">
          <label className="block text-sm font-semibold mb-2">
            Tipo de Análise
          </label>
          <div className="flex gap-4">
            <label className="flex items-center gap-2 cursor-pointer">
              <input
                type="radio"
                name="tipoAnalise"
                value="vertical"
                checked={tipoAnalise === 'vertical'}
                onChange={(e) => setTipoAnalise(e.target.value)}
                className="w-4 h-4 text-[#000638]"
              />
              <span className="text-sm font-medium">Análise Vertical</span>
              <span className="text-xs text-gray-500">(Período único)</span>
            </label>
            <label className="flex items-center gap-2 cursor-pointer">
              <input
                type="radio"
                name="tipoAnalise"
                value="horizontal"
                checked={tipoAnalise === 'horizontal'}
                onChange={(e) => setTipoAnalise(e.target.value)}
                className="w-4 h-4 text-[#000638]"
              />
              <span className="text-sm font-medium">Análise Horizontal</span>
              <span className="text-xs text-gray-500">
                (Comparar 2 períodos)
              </span>
            </label>
          </div>
        </div>

        {/* Filtro rápido por período (ANO/Meses) */}
        <div className="mb-3">
          <div className="flex flex-wrap gap-1">
            {[
              'ANO',
              'JAN',
              'FEV',
              'MAR',
              'ABR',
              'MAI',
              'JUN',
              'JUL',
              'AGO',
              'SET',
              'OUT',
              'NOV',
              'DEZ',
            ].map((mes) => (
              <button
                key={mes}
                type="button"
                onClick={() => handleFiltroMensalChange(mes)}
                className={`px-3 py-1 text-xs font-medium rounded-md transition-colors ${
                  filtroMensal === mes
                    ? 'bg-[#000638] text-white'
                    : 'bg-white text-gray-600 hover:bg-gray-100 border border-gray-300'
                }`}
              >
                {mes}
              </button>
            ))}
          </div>
        </div>
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-2">
          <div>
            <label className="block text-xs font-semibold mb-1">
              Período Inicial
            </label>
            <input
              type="date"
              className="border rounded px-2 py-1.5 w-full text-xs"
              value={periodo.dt_inicio}
              onChange={(e) =>
                setPeriodo((prev) => ({ ...prev, dt_inicio: e.target.value }))
              }
            />
          </div>
          <div>
            <label className="block text-xs font-medium text-gray-700 mb-1">
              Período Final
            </label>
            <input
              type="date"
              className="border rounded px-2 py-1.5 w-full text-xs"
              value={periodo.dt_fim}
              onChange={(e) =>
                setPeriodo((prev) => ({ ...prev, dt_fim: e.target.value }))
              }
            />
          </div>
          <div className="flex items-center">
            <button
              className="bg-[#000638] text-white text-xs px-3 py-2 rounded hover:bg-[#fe0000]"
              onClick={buscarVendasBrutas}
              disabled={loading}
            >
              {loading ? 'Carregando...' : 'Buscar Dados'}
            </button>
          </div>
        </div>

        {/* Campos de Período de Comparação (visível apenas na análise horizontal) */}
        {tipoAnalise === 'horizontal' && (
          <div className="grid grid-cols-1 sm:grid-cols-3 gap-2 mt-4 pt-4 border-t border-gray-300">
            <div>
              <label className="block text-xs font-semibold mb-1 text-blue-700">
                Período 2 - Inicial (Comparação)
              </label>
              <input
                type="date"
                className="border border-blue-300 rounded px-2 py-1.5 w-full text-xs focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                value={periodoComparacao.dt_inicio}
                onChange={(e) =>
                  setPeriodoComparacao((prev) => ({
                    ...prev,
                    dt_inicio: e.target.value,
                  }))
                }
              />
            </div>
            <div>
              <label className="block text-xs font-semibold mb-1 text-blue-700">
                Período 2 - Final (Comparação)
              </label>
              <input
                type="date"
                className="border border-blue-300 rounded px-2 py-1.5 w-full text-xs focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                value={periodoComparacao.dt_fim}
                onChange={(e) =>
                  setPeriodoComparacao((prev) => ({
                    ...prev,
                    dt_fim: e.target.value,
                  }))
                }
              />
            </div>
            <div className="flex items-center">
              <span className="text-xs text-gray-600 italic">
                💡 Compare os resultados entre os dois períodos selecionados
              </span>
            </div>
          </div>
        )}

        {error && (
          <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-md">
            <p className="text-sm text-red-700">{error}</p>
          </div>
        )}
      </div>

      {/* Tree View */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        <div className="bg-gray-50 px-4 py-3 border-b border-gray-200">
          <h2 className="text-lg font-semibold text-gray-900">
            Demonstrativo de Resultado do Exercício
          </h2>
          <p className="text-sm text-gray-600 mt-1">
            Período:{' '}
            {(() => {
              const parseDateNoTZ = (iso) => {
                if (!iso) return null;
                try {
                  const [y, m, d] = iso.split('-').map((n) => parseInt(n, 10));
                  if (!y || !m || !d) return null;
                  return new Date(y, m - 1, d);
                } catch {
                  return null;
                }
              };
              const formatDateBR = (iso) => {
                const d = parseDateNoTZ(iso);
                if (!d) return '';
                const dd = String(d.getDate()).padStart(2, '0');
                const mm = String(d.getMonth() + 1).padStart(2, '0');
                const yyyy = String(d.getFullYear());
                return `${dd}/${mm}/${yyyy}`;
              };
              return periodo.dt_inicio && periodo.dt_fim
                ? `${formatDateBR(periodo.dt_inicio)} a ${formatDateBR(
                    periodo.dt_fim,
                  )}`
                : 'Selecione um período';
            })()}
          </p>
        </div>

        {/* Card de Comparação para Análise Horizontal */}
        {tipoAnalise === 'horizontal' &&
          vendasBrutas > 0 &&
          dadosPeriodo2.vendasBrutas > 0 && (
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 px-4 py-3 border-b border-blue-200">
              <h3 className="text-sm font-semibold text-blue-900 mb-3">
                📊 Comparação entre Períodos
              </h3>
              <div className="grid grid-cols-4 gap-4">
                {/* Receitas Brutas */}
                <div className="bg-white rounded-lg p-3 shadow-sm">
                  <p className="text-xs text-gray-500 mb-1">Receitas Brutas</p>
                  <div className="flex items-baseline gap-2">
                    <span className="text-sm font-bold text-gray-700">
                      {formatCurrency(vendasBrutas)}
                    </span>
                    <span className="text-xs text-blue-600">→</span>
                    <span className="text-sm font-bold text-blue-700">
                      {formatCurrency(dadosPeriodo2.vendasBrutas)}
                    </span>
                  </div>
                  <p
                    className={`text-xs font-semibold mt-1 ${
                      ((dadosPeriodo2.vendasBrutas - vendasBrutas) /
                        vendasBrutas) *
                        100 >=
                      0
                        ? 'text-green-600'
                        : 'text-red-600'
                    }`}
                  >
                    {(
                      ((dadosPeriodo2.vendasBrutas - vendasBrutas) /
                        vendasBrutas) *
                      100
                    ).toFixed(1)}
                    %
                    {((dadosPeriodo2.vendasBrutas - vendasBrutas) /
                      vendasBrutas) *
                      100 >=
                    0
                      ? ' ↑'
                      : ' ↓'}
                  </p>
                </div>

                {/* Receita Líquida */}
                <div className="bg-white rounded-lg p-3 shadow-sm">
                  <p className="text-xs text-gray-500 mb-1">Receita Líquida</p>
                  <div className="flex items-baseline gap-2">
                    <span className="text-sm font-bold text-gray-700">
                      {formatCurrency(receitaLiquida)}
                    </span>
                    <span className="text-xs text-blue-600">→</span>
                    <span className="text-sm font-bold text-blue-700">
                      {formatCurrency(dadosPeriodo2.receitaLiquida)}
                    </span>
                  </div>
                  <p
                    className={`text-xs font-semibold mt-1 ${
                      ((dadosPeriodo2.receitaLiquida - receitaLiquida) /
                        receitaLiquida) *
                        100 >=
                      0
                        ? 'text-green-600'
                        : 'text-red-600'
                    }`}
                  >
                    {(
                      ((dadosPeriodo2.receitaLiquida - receitaLiquida) /
                        receitaLiquida) *
                      100
                    ).toFixed(1)}
                    %
                    {((dadosPeriodo2.receitaLiquida - receitaLiquida) /
                      receitaLiquida) *
                      100 >=
                    0
                      ? ' ↑'
                      : ' ↓'}
                  </p>
                </div>

                {/* Lucro Bruto */}
                <div className="bg-white rounded-lg p-3 shadow-sm">
                  <p className="text-xs text-gray-500 mb-1">Lucro Bruto</p>
                  <div className="flex items-baseline gap-2">
                    <span className="text-sm font-bold text-gray-700">
                      {formatCurrency(lucroBruto)}
                    </span>
                    <span className="text-xs text-blue-600">→</span>
                    <span className="text-sm font-bold text-blue-700">
                      {formatCurrency(dadosPeriodo2.lucroBruto)}
                    </span>
                  </div>
                  <p
                    className={`text-xs font-semibold mt-1 ${
                      ((dadosPeriodo2.lucroBruto - lucroBruto) / lucroBruto) *
                        100 >=
                      0
                        ? 'text-green-600'
                        : 'text-red-600'
                    }`}
                  >
                    {(
                      ((dadosPeriodo2.lucroBruto - lucroBruto) / lucroBruto) *
                      100
                    ).toFixed(1)}
                    %
                    {((dadosPeriodo2.lucroBruto - lucroBruto) / lucroBruto) *
                      100 >=
                    0
                      ? ' ↑'
                      : ' ↓'}
                  </p>
                </div>

                {/* Resultado Operacional */}
                <div className="bg-white rounded-lg p-3 shadow-sm">
                  <p className="text-xs text-gray-500 mb-1">
                    Resultado Operacional
                  </p>
                  <div className="flex items-baseline gap-2">
                    <span className="text-sm font-bold text-gray-700">
                      {formatCurrency(lucroBruto - planoDespesasTotal)}
                    </span>
                    <span className="text-xs text-blue-600">→</span>
                    <span className="text-sm font-bold text-blue-700">
                      {formatCurrency(
                        dadosPeriodo2.lucroBruto -
                          dadosPeriodo2.planoDespesasTotal,
                      )}
                    </span>
                  </div>
                  <p
                    className={`text-xs font-semibold mt-1 ${
                      ((dadosPeriodo2.lucroBruto -
                        dadosPeriodo2.planoDespesasTotal -
                        (lucroBruto - planoDespesasTotal)) /
                        (lucroBruto - planoDespesasTotal)) *
                        100 >=
                      0
                        ? 'text-green-600'
                        : 'text-red-600'
                    }`}
                  >
                    {(
                      ((dadosPeriodo2.lucroBruto -
                        dadosPeriodo2.planoDespesasTotal -
                        (lucroBruto - planoDespesasTotal)) /
                        (lucroBruto - planoDespesasTotal)) *
                      100
                    ).toFixed(1)}
                    %
                    {((dadosPeriodo2.lucroBruto -
                      dadosPeriodo2.planoDespesasTotal -
                      (lucroBruto - planoDespesasTotal)) /
                      (lucroBruto - planoDespesasTotal)) *
                      100 >=
                    0
                      ? ' ↑'
                      : ' ↓'}
                  </p>
                </div>
              </div>
            </div>
          )}

        {loading ? (
          <div className="flex flex-col items-center justify-center py-12">
            <LoadingSpinner
              size="lg"
              text={loadingStatus || 'Carregando dados do DRE...'}
            />
            {loadingStatus && (
              <div className="mt-4 w-full max-w-md">
                <div className="bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                    style={{
                      width: loadingStatus.includes('Varejo')
                        ? '20%'
                        : loadingStatus.includes('Multimarcas')
                        ? '40%'
                        : loadingStatus.includes('Franquia')
                        ? '60%'
                        : loadingStatus.includes('Revenda')
                        ? '80%'
                        : loadingStatus.includes('impostos')
                        ? '95%'
                        : loadingStatus.includes('Processando')
                        ? '100%'
                        : '0%',
                    }}
                  ></div>
                </div>
                <div className="text-center mt-2 text-sm text-gray-600">
                  {loadingStatus.includes('Varejo') && '1/5 - Varejo'}
                  {loadingStatus.includes('Multimarcas') && '2/5 - Multimarcas'}
                  {loadingStatus.includes('Franquia') && '3/5 - Franquia'}
                  {loadingStatus.includes('Revenda') && '4/5 - Revenda'}
                  {loadingStatus.includes('impostos') && '5/5 - Impostos'}
                  {loadingStatus.includes('Processando') && 'Finalizando...'}
                </div>
              </div>
            )}
          </div>
        ) : vendasBrutas > 0 ? (
          <>
            {/* DRE Tree View - Estilo Contas a Pagar */}
            <div className="space-y-2 flex justify-center items-center flex-col">
              {/* Botões de ação */}
              <div className="flex justify-between items-center">
                {/* Botão discreto para expandir/colapsar todos */}
                <button
                  onClick={toggleTodosTopicos}
                  className="text-xs text-gray-500 hover:text-gray-700 px-0.5 py-0.5 rounded transition-colors flex items-center gap-1"
                  title={
                    todosExpandidos
                      ? 'Colapsar todos os tópicos'
                      : 'Expandir todos os tópicos'
                  }
                >
                  {todosExpandidos ? (
                    <>
                      <span>−</span>
                      <span>Colapsar tudo</span>
                    </>
                  ) : (
                    <>
                      <span>+</span>
                      <span>Expandir tudo</span>
                    </>
                  )}
                </button>
              </div>

              {/* Módulos da DRE */}
              {dreData.map((modulo, moduloIndex) => {
                const isModuloExpanded = categoriasExpandidas.has(modulo.label);

                // Seções de resultado que não devem ser expansíveis
                const resultadoSections = [
                  // 'Receitas Brutas',
                  // 'Receita Líquida de Vendas',
                  // 'Lucro Bruto',
                  // 'Resultado Operacional',
                  // 'Lucro Antes do IR/CSLL',
                  // 'Lucro Líquido do Exercício',
                ];

                const isResultadoSection = resultadoSections.includes(
                  modulo.label,
                );

                return (
                  <div
                    key={`modulo-${moduloIndex}-${modulo.id}`}
                    className={`w-1/2 ${
                      isResultadoSection
                        ? 'bg-blue-50 rounded-lg'
                        : 'border border-gray-200 rounded-lg overflow-hidden'
                    }`}
                  >
                    {/* Cabeçalho do módulo principal */}
                    <div
                      className={`${
                        isResultadoSection
                          ? 'bg-blue-50 cursor-default'
                          : 'bg-gray-50 hover:bg-gray-100 cursor-pointer'
                      } transition-colors px-2 py-1.5 flex items-center justify-between`}
                      onClick={
                        isResultadoSection
                          ? undefined
                          : () => toggleCategoria(modulo.label)
                      }
                    >
                      <div className="flex items-center space-x-2">
                        {!isResultadoSection &&
                          (isModuloExpanded ? (
                            <CaretDown size={10} className="text-gray-600" />
                          ) : (
                            <CaretRight size={10} className="text-gray-600" />
                          ))}
                        <div>
                          <h3 className="font-medium text-xs text-gray-800">
                            {modulo.label}
                          </h3>
                          <div className="flex gap-96 items-center justify-between space-x-32 text-xs text-gray-600">
                            <span
                              className={`font-medium text-xs ${
                                modulo.value >= 0
                                  ? 'text-green-600'
                                  : 'text-red-600'
                              }`}
                            >
                              {formatCurrency(Math.abs(modulo.value))}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Sub-itens do módulo */}
                    {isModuloExpanded &&
                      modulo.children &&
                      modulo.children.length > 0 && (
                        <div className="bg-white border-t border-gray-100">
                          {modulo.children.map((subitem, subitemIndex) => {
                            const chaveSubitem = `${modulo.label}|${subitem.label}`;
                            const isSubitemExpanded =
                              categoriasExpandidas.has(chaveSubitem);
                            const hasSubitemChildren =
                              subitem.children && subitem.children.length > 0;

                            return (
                              <div
                                key={`subitem-${moduloIndex}-${subitemIndex}-${subitem.id}`}
                                className="border-b border-gray-100 last:border-b-0"
                              >
                                {/* Cabeçalho do sub-item */}
                                <div
                                  className={`bg-gray-25 hover:bg-gray-50 transition-colors px-4 py-1.5 flex items-center justify-between ${
                                    hasSubitemChildren
                                      ? 'cursor-pointer'
                                      : 'cursor-default'
                                  }`}
                                  onClick={
                                    hasSubitemChildren
                                      ? () => toggleCategoria(chaveSubitem)
                                      : undefined
                                  }
                                >
                                  <div className="flex items-center space-x-2">
                                    {hasSubitemChildren &&
                                      (isSubitemExpanded ? (
                                        <CaretDown
                                          size={10}
                                          className="text-gray-500"
                                        />
                                      ) : (
                                        <CaretRight
                                          size={10}
                                          className="text-gray-500"
                                        />
                                      ))}
                                    <div>
                                      <h4 className="font-medium text-xs text-gray-700">
                                        {subitem.label}
                                      </h4>
                                      <div className="flex items-center space-x-3 text-xs text-gray-500">
                                        <span
                                          className={`font-medium ${
                                            subitem.value >= 0
                                              ? 'text-green-500'
                                              : 'text-red-500'
                                          }`}
                                        >
                                          {formatCurrency(
                                            Math.abs(subitem.value),
                                          )}
                                        </span>
                                      </div>
                                    </div>
                                  </div>
                                </div>

                                {/* Sub-sub-itens (se existirem) */}
                                {isSubitemExpanded &&
                                  subitem.children &&
                                  subitem.children.length > 0 && (
                                    <div className="bg-white border-t border-gray-50">
                                      {subitem.children.map(
                                        (subsubitem, subsubitemIndex) => {
                                          const chaveSubsubitem = `${modulo.label}|${subitem.label}|${subsubitem.label}`;
                                          const isSubsubitemExpanded =
                                            categoriasExpandidas.has(
                                              chaveSubsubitem,
                                            );
                                          const hasSubsubitemChildren =
                                            subsubitem.children &&
                                            subsubitem.children.length > 0;

                                          return (
                                            <div
                                              key={`subsubitem-${moduloIndex}-${subitemIndex}-${subsubitemIndex}-${subsubitem.id}`}
                                              className="border-b border-gray-50 last:border-b-0"
                                            >
                                              <div
                                                className={`bg-gray-25 hover:bg-gray-50 transition-colors px-6 py-1.5 flex items-center justify-between ${
                                                  hasSubsubitemChildren
                                                    ? 'cursor-pointer'
                                                    : 'cursor-default'
                                                }`}
                                                onClick={
                                                  hasSubsubitemChildren
                                                    ? () =>
                                                        toggleCategoria(
                                                          chaveSubsubitem,
                                                        )
                                                    : undefined
                                                }
                                              >
                                                <div className="flex items-center space-x-2">
                                                  {hasSubsubitemChildren &&
                                                    (isSubsubitemExpanded ? (
                                                      <CaretDown
                                                        size={10}
                                                        className="text-gray-400"
                                                      />
                                                    ) : (
                                                      <CaretRight
                                                        size={10}
                                                        className="text-gray-400"
                                                      />
                                                    ))}
                                                  <div>
                                                    <h5 className="font-medium text-xs text-gray-600">
                                                      {subsubitem.label}
                                                    </h5>
                                                    <div className="flex items-center space-x-3 text-xs text-gray-400">
                                                      {subsubitem.description && (
                                                        <span className="text-gray-400">
                                                          {
                                                            subsubitem.description
                                                          }
                                                        </span>
                                                      )}
                                                      <span
                                                        className={`font-medium ${
                                                          subsubitem.value >= 0
                                                            ? 'text-green-400'
                                                            : 'text-red-400'
                                                        }`}
                                                      >
                                                        {formatCurrency(
                                                          Math.abs(
                                                            subsubitem.value,
                                                          ),
                                                        )}
                                                      </span>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>

                                              {/* Sub-sub-sub-itens (4º nível - se existirem) */}
                                              {isSubsubitemExpanded &&
                                                subsubitem.children &&
                                                subsubitem.children.length >
                                                  0 && (
                                                  <div className="bg-white border-t border-gray-50">
                                                    {subsubitem.children.map(
                                                      (
                                                        subsubsubitem,
                                                        subsubsubitemIndex,
                                                      ) => (
                                                        <div
                                                          key={`subsubsubitem-${moduloIndex}-${subitemIndex}-${subsubitemIndex}-${subsubsubitemIndex}-${subsubsubitem.id}`}
                                                          className="border-b border-gray-50 last:border-b-0"
                                                        >
                                                          <div className="bg-gray-25 hover:bg-gray-50 cursor-default transition-colors px-8 py-1.5 flex items-center justify-between">
                                                            <div className="flex items-center space-x-2">
                                                              <div>
                                                                <h6 className="font-medium text-xs text-gray-500">
                                                                  {
                                                                    subsubsubitem.label
                                                                  }
                                                                </h6>
                                                                <div className="flex items-center space-x-3 text-xs text-gray-300">
                                                                  {subsubsubitem.description && (
                                                                    <span className="text-gray-400">
                                                                      {
                                                                        subsubsubitem.description
                                                                      }
                                                                    </span>
                                                                  )}
                                                                  <span
                                                                    className={`font-medium ${
                                                                      subsubsubitem.value >=
                                                                      0
                                                                        ? 'text-green-300'
                                                                        : 'text-red-300'
                                                                    }`}
                                                                  >
                                                                    {formatCurrency(
                                                                      Math.abs(
                                                                        subsubsubitem.value,
                                                                      ),
                                                                    )}
                                                                  </span>
                                                                </div>
                                                              </div>
                                                            </div>
                                                          </div>
                                                        </div>
                                                      ),
                                                    )}
                                                  </div>
                                                )}
                                            </div>
                                          );
                                        },
                                      )}
                                    </div>
                                  )}
                              </div>
                            );
                          })}
                        </div>
                      )}
                  </div>
                );
              })}
            </div>
          </>
        ) : (
          <div className="flex flex-col items-center justify-center py-12 px-4">
            <div className="text-center">
              <TrendUp className="w-16 h-16 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                Nenhum dado carregado
              </h3>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default DRE;
